// flow-typed signature: e843a1fbc0186c980aa69c2f3afd8fda
// flow-typed version: <<STUB>>/reduxsauce_v1.0.1

/**
 * This is an autogenerated libdef stub for:
 *
 *   'reduxsauce'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'reduxsauce' {
  import type { Action, Reducer, ActionCreator } from 'redux';

  declare type Actions = {
    [action: string]: (string[] | DefaultActionTypes | ActionCreator<DefaultActionTypes, *>) | null;
  }

  declare type DefaultActionTypes = {
    [action: string]: string | number | DefaultActionTypes | null;
  }

  declare type DefaultActionCreators = {
    [action: string]: (...args: any[]) => AnyAction;
  }

  declare export type Handlers<S, A = AnyAction> = {
    [type: string]: (state: S, action: A) => S;
  }

  /**
   * Custom options for created types and actions
   *
   * prefix - prepend the string to all created types
   */
  declare export type Options = {
    prefix: string;
  }

  declare export type CreatedActions<T = DefaultActionTypes, C = DefaultActionCreators> = {
    Types: T;
    Creators: C;
  }

  declare export function createActions<X = Actions,T = DefaultActionTypes>(
    actions: X,
    // options?: Options // We're not supporting options since can't type
  ): CreatedActions<T, {[action: $Keys<X>]: (...args: any[]) => AnyAction}>;

  declare export function createReducer<S = {}, A = Action>(
    initialState: S,
    handlers: Handlers<S, A>
  ): Reducer<S, A>;

  declare export function createTypes<T = DefaultActionTypes>(types: string, options?: Options): T;

  declare export function resettableReducer<S, A=Action>(
    typeToReset: string
  ): (originalReducer: Reducer<S, A>) => Reducer<S, A>;

  declare export function resettableReducer<S, A= Action>(
    typeToReset: string,
    originalReducer: Reducer<S, A>
  ): Reducer<S, A>;
}
